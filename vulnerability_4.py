# vulnerability_4.py
from urllib.parse import urlparse
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC


def scan(url):
    # Parse the URL
    parsed_url = urlparse(url)
    
    # Validate the URL scheme
    if parsed_url.scheme not in ['http', 'https']:
        return f'Invalid URL scheme: {parsed_url.scheme}'
    
    # Validate the URL host
    if not parsed_url.hostname:
        return 'Invalid URL host'
    
    # Validate the URL path
    if not parsed_url.path:
        return 'Invalid URL path'
    
    # Perform the SSRF scan using Selenium
    try:
        # Create a new instance of the Chrome WebDriver
        driver = webdriver.Firefox()
        
        # Navigate to the URL
        driver.get(url)
        
        # Wait for the page to load
        WebDriverWait(driver, 5).until(EC.presence_of_element_located((By.TAG_NAME, 'body')))
        
        # Check if the page loaded successfully
        if driver.title:
            print(f'The website {url} is vulnerable to SSRF')
            return f'SSRF scan result for {url}: Vulnerable'
        else:
            print(f'The website {url} is not vulnerable to SSRF')
            return f'SSRF scan result for {url}: Not vulnerable'
    except Exception as e:
        print(f'Error Scanning Vulnerability to SSRF')
        return f'SSRF scan result for {url}: Error: {str(e)}'
    finally:
        # Close the WebDriver
        driver.quit()
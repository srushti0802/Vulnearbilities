#vulnerability_2.py
from selenium import webdriver
from selenium.common.exceptions import TimeoutException, NoAlertPresentException
import concurrent.futures
import time

def scan_payload(vulnerable_url, driver):
    try:
        driver.get(vulnerable_url)

        # Check if an alert is present, which could indicate an XSS vulnerability
        driver.switch_to.alert.accept()

        return vulnerable_url

    except NoAlertPresentException:
        # No alert, continue with other checks or return None
        pass
    except TimeoutException:
        print(f'Timeout occurred while scanning {vulnerable_url}')

    return None

def scan(url, headers=None, proxies=None):
    vulnerable_urls = []

    try:
        file_path = r'C:\Users\HP\OneDrive\Documents\SchoolWork\Semesters\Semester8\PythonGUI\vulnerabilities\xss.txt'

        # Set up Selenium WebDriver
        driver = webdriver.Chrome()  # Use appropriate WebDriver for your browser

        with open(file_path, 'r', encoding='utf-8') as file:
            with concurrent.futures.ThreadPoolExecutor(max_workers=10) as executor:
                futures = []

                for line in file:
                    payload_url = f'{url}?id={line.strip()}'
                    futures.append(executor.submit(scan_payload, payload_url, driver))
                    time.sleep(1)  # Increase the delay between requests

                for future in concurrent.futures.as_completed(futures):
                    try:
                        result = future.result()
                        if result:
                            vulnerable_urls.append(result)
                    except Exception as e:
                        print(f'Error processing result: {e}')

        return (
            f'Vulnerable URLs: {vulnerable_urls}' if vulnerable_urls else 'No vulnerable URLs found',
            vulnerable_urls
        )

    except Exception as e:
        print(f'Error: {e}')

    finally:
        # Close the WebDriver when done
        if driver:
            driver.quit()


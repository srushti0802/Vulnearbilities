# vulnerability_3.py
import requests
from bs4 import BeautifulSoup
from selenium import webdriver
from selenium.common import NoSuchElementException
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

def scan(url):
    # Use requests to get the content of the website
    response = requests.get(url)
    response.raise_for_status()  # Raise an exception for bad responses

    # Use BeautifulSoup to parse the content
    soup = BeautifulSoup(response.content, 'html.parser')

    # Find all the forms on the website
    forms = soup.find_all('form')

    # Use Selenium webdriver to automate the process
    with webdriver.Firefox() as driver:
        # Initialize a list to store the CSRF scan results
        csrf_scan_results = []

        # HTML GET - Requiring User Interaction
        csrf_scan_results.append(get_request_vulnerability(driver, url, 'GET', {'username': 'CSRFd'}))

        # HTML GET - No User Interaction
        csrf_scan_results.append(get_request_vulnerability(driver, url, 'GET', {}, {'src': 'http://www.example.com/api/setusername?username=CSRFd'}))

        # HTML POST - Requiring User Interaction
        csrf_scan_results.append(get_request_vulnerability(driver, url, 'POST', {'username': 'CSRFd'}, {'method': 'manual'}))

        # HTML POST - AutoSubmit - No User Interaction
        csrf_scan_results.append(get_request_vulnerability(driver, url, 'POST', {'username': 'CSRFd'}, {'method': 'autosubmit'}))

        # HTML POST - multipart/form-data with file upload - Requiring User Interaction
        csrf_scan_results.append(get_file_upload_vulnerability(driver, url, {'file': ('CSRF-filename', 'CSRF-filecontent')}))

        # JSON GET - Simple Request
        csrf_scan_results.append(get_json_request_vulnerability(url, 'GET', {}))

        # JSON POST - Simple Request
        csrf_scan_results.append(get_json_request_vulnerability(url, 'POST', {'role': 'admin'}, {'method': 'xhr'}))

        # JSON POST - Simple Request (autosubmit)
        csrf_scan_results.append(get_json_request_vulnerability(url, 'POST', {'role': 'admin'}, {'method': 'autosubmit'}))

        # JSON POST - Complex Request
        csrf_scan_results.append(get_json_request_vulnerability(url, 'POST', {'role': 'admin'}, {'method': 'complex'}))

        # Bypass referer header validation
        csrf_scan_results.append(get_referer_vulnerability(url))

    # If no vulnerability was detected
    if not any(csrf_scan_results):
        return f'No CSRF vulnerability detected in {url}'

    # Return the list of CSRF scan results
    print(f'CSRF Scan Results: {csrf_scan_results}')
    return f'No CSRF Vulnerability Detected'

def get_request_vulnerability(driver, url, method, data, headers={}):
    try:
        # Navigate to the website
        driver.get(url)

        # Find the form on the website
        form_element = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.XPATH, '//form')))

        # Fill in the form with the payload
        for field, value in data.items():
            input_element = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.NAME, field)))
            input_element.send_keys(value)

        # Submit the form
        form_element.submit()

        # Wait for the response
        WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.TAG_NAME, 'body')))

        # Get the response status code
        response_status_code = driver.execute_script("return window.performance.timing.responseStart")

        # Check if the server responded with a different status code
        if response_status_code != 200:
            return f'CSRF vulnerability detected in {url} (Method: {method})'

        # Check for CSRF tokens
        if not check_csrf_token(driver.page_source, form_element):
            return f'CSRF token missing in {url} (Method: {method})'

        return f'No CSRF Vulnerability Detected in {url}'

    except NoSuchElementException as e:
        return f'Error: Element not found - {str(e)}'
    except Exception as e:
        return f'An error occurred: {str(e)}'

def get_file_upload_vulnerability(driver, url, file):
    try:
        # Navigate to the website
        driver.get(url)

        # Find the form on the website
        form_element = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.XPATH, '//form[@enctype="multipart/form-data"]')))

        # Fill in the form with the payload
        file_input = form_element.find_element(By.NAME, 'file')
        file_input.send_keys(file[1])

        # Submit the form
        form_element.submit()

        # Wait for the response
        WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.TAG_NAME, 'body')))

        # Get the response status code
        response_status_code = driver.execute_script("return window.performance.timing.responseStart")

        # Check if the server responded with a different status code
        if response_status_code != 200:
            return f'CSRF vulnerability detected in {url} (Method: multipart/form-data with file upload)'

        # Check for CSRF tokens
        if not check_csrf_token(driver.page_source, form_element):
            return f'CSRF token missing in {url} (Method: multipart/form-data with file upload)'

        return f'No CSRF Vulnerability Detected in {url}'

    except Exception as e:
        return f'An error occurred: {str(e)}'

def get_json_request_vulnerability(url, method, data, headers={}):
    try:
        # Set the request headers
        headers['Content-Type'] = 'application/json'

        # Send the request
        if method == 'xhr':
            # With XHR
            xhr = requests.get(url, headers=headers)
        elif method == 'autosubmit':
            # With autosubmit send form
            form_data = {'{"' + ','.join([f'"{k}":"{v}"' for k, v in data.items()]) + '}"': ''}
            xhr = requests.post(url, headers=headers, data=form_data)
        elif method == 'complex':
            # JSON POST - Complex Request
            xhr = requests.post(url, headers=headers, json=data)
        else:
            return None

        # Check if the server responded with a different status code
        if xhr.status_code != 200:
            return f'CSRF vulnerability detected in {url} (Method: {method})'

        # Check for CSRF tokens
        if not check_csrf_token(xhr.text, None):
            return f'CSRF token missing in {url} (Method: {method})'

        return f'No CSRF Vulnerability Detected in {url}'

    except Exception as e:
        return f'An error occurred: {str(e)}'

def get_referer_vulnerability(url):
    try:
        # Basic payload
        response = requests.get(url + '?trusted.domain.com')
        if response.headers.get('Referer') == url + '?trusted.domain.com':
            return f'Referer header bypass vulnerability detected in {url}'

        # With question mark(?) payload
        response = requests.get(url + ';trusted.domain.com')
        if response.headers.get('Referer') == url + ';trusted.domain.com':
            return f'Referer header bypass vulnerability detected in {url}'

        # With semicolon(;) payload
        response = requests.get(url + ';trusted.domain.com')
        if response.headers.get('Referer') == url + ';trusted.domain.com':
            return f'Referer header bypass vulnerability detected in {url}'

        # With subdomain payload
        response = requests.get('https://trusted.domain.com.attacker.com' + url)
        if response.headers.get('Referer') == 'https://trusted.domain.com.attacker.com' + url:
            return f'Referer header bypass vulnerability detected in {url}'

        return f'No CSRF Vulnerability Detected in {url}'

    except Exception as e:
        return f'An error occurred: {str(e)}'

def check_csrf_token(response, form=None):
    try:
        # Check if the response contains a CSRF token
        soup = BeautifulSoup(response, 'html.parser')
        token_input = soup.find('input', {'name': '_csrf'})
        if token_input:
            # Check if the token is present in the form
            if form:
                form_tokens = form.find_all('input', {'name': '_csrf'})
                if form_tokens:
                    # Check if the token values match
                    form_token = form_tokens[0]['value']
                    response_token = token_input['value']
                    return form_token == response_token

        return f'No CSRF token found'

    except Exception as e:
        return f'An error occurred: {str(e)}'
